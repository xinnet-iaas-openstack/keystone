#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# Copyright 2011 OpenStack LLC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
Keystone Identity Server - Service API
"""

import optparse
import os
import sys

# If ../../keystone/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'keystone', '__init__.py')):
    sys.path.insert(0, possible_topdir)

import keystone.tools.tracer  # @UnusedImport # module runs on import
from keystone.common import config
from keystone.config import CONF
import keystone.server


def get_options():
    # Initialize a parser for our configuration paramaters
    # since we have special handling for the -a|--admin-port argument
    parser = optparse.OptionParser()
    common_group = config.add_common_options(parser)
    config.add_log_options(parser)

    # Parse CLI arguments and merge with config
    (options, args) = config.parse_options(parser)
    return options


def main():
    # Get merged config and CLI options and admin-specific settings
    options = get_options()
    config_file = config.find_config_file(options, sys.argv[1:])
    CONF(config_files=[config_file])
    try:
        # Load Service API server
        server = keystone.server.Server(name='Service API',
                                       config_name='keystone-legacy-auth')
        server.start(wait=True)
    except RuntimeError, e:
        sys.exit("ERROR: %s" % e)


if __name__ == '__main__':
    main()
